package main

import (
	"reflect"
	"testing"
)

func TestSolveSudokuTableDriven(t *testing.T) {
	tests := []struct {
		name     string
		input    [][]int
		expected [][]int
		err      error
	}{
		{
			name: "valid matrix / no error",
			input: [][]int{
				{5, 3, 0, 0, 7, 0, 0, 0, 0},
				{6, 0, 0, 1, 9, 5, 0, 0, 0},
				{0, 9, 8, 0, 0, 0, 0, 6, 0},
				{8, 0, 0, 0, 6, 0, 0, 0, 3},
				{4, 0, 0, 8, 0, 3, 0, 0, 1},
				{7, 0, 0, 0, 2, 0, 0, 0, 6},
				{0, 6, 0, 0, 0, 0, 2, 8, 0},
				{0, 0, 0, 4, 1, 9, 0, 0, 5},
				{0, 0, 0, 0, 8, 0, 0, 7, 9},
			},
			expected: [][]int{
				{5, 3, 4, 6, 7, 8, 9, 1, 2},
				{6, 7, 2, 1, 9, 5, 3, 4, 8},
				{1, 9, 8, 3, 4, 2, 5, 6, 7},
				{8, 5, 9, 7, 6, 1, 4, 2, 3},
				{4, 2, 6, 8, 5, 3, 7, 9, 1},
				{7, 1, 3, 9, 2, 4, 8, 5, 6},
				{9, 6, 1, 5, 3, 7, 2, 8, 4},
				{2, 8, 7, 4, 1, 9, 6, 3, 5},
				{3, 4, 5, 2, 8, 6, 1, 7, 9},
			},
			err: nil,
		},
		{
			name: "valid matrix #2 / no error",
			input: [][]int{
				{2, 0, 0, 3, 0, 0, 0, 0, 0},
				{8, 0, 4, 0, 6, 2, 0, 0, 3},
				{0, 1, 3, 8, 0, 0, 2, 0, 0},
				{0, 0, 0, 0, 2, 0, 3, 9, 0},
				{5, 0, 7, 0, 0, 0, 6, 2, 1},
				{0, 3, 2, 0, 0, 6, 0, 0, 0},
				{0, 2, 0, 0, 0, 9, 1, 4, 0},
				{6, 0, 1, 2, 5, 0, 8, 0, 9},
				{0, 0, 0, 0, 0, 1, 0, 0, 2},
			},
			expected: [][]int{
				{2, 7, 6, 3, 1, 4, 9, 5, 8},
				{8, 5, 4, 9, 6, 2, 7, 1, 3},
				{9, 1, 3, 8, 7, 5, 2, 6, 4},
				{4, 6, 8, 1, 2, 7, 3, 9, 5},
				{5, 9, 7, 4, 3, 8, 6, 2, 1},
				{1, 3, 2, 5, 9, 6, 4, 8, 7},
				{3, 2, 5, 7, 8, 9, 1, 4, 6},
				{6, 4, 1, 2, 5, 3, 8, 7, 9},
				{7, 8, 9, 6, 4, 1, 5, 3, 2},
			},
			err: nil,
		},
		{
			name: "unsolvable matrix",
			input: [][]int{
				{2, 0, 0, 3, 0, 0, 0, 0, 0},
				{8, 0, 4, 0, 6, 2, 0, 0, 3},
				{0, 1, 3, 8, 0, 0, 2, 0, 0},
				{0, 0, 0, 0, 0, 2, 0, 3, 9},
				{5, 0, 7, 0, 0, 0, 6, 2, 1},
				{0, 3, 2, 0, 0, 6, 0, 0, 0},
				{0, 2, 0, 0, 0, 9, 1, 4, 0},
				{6, 0, 1, 2, 5, 0, 8, 0, 9},
				{0, 0, 0, 0, 0, 1, 0, 0, 2},
			},
			expected: [][]int{
				{2, 0, 0, 3, 0, 0, 0, 0, 0},
				{8, 0, 4, 0, 6, 2, 0, 0, 3},
				{0, 1, 3, 8, 0, 0, 2, 0, 0},
				{0, 0, 0, 0, 0, 2, 0, 3, 9},
				{5, 0, 7, 0, 0, 0, 6, 2, 1},
				{0, 3, 2, 0, 0, 6, 0, 0, 0},
				{0, 2, 0, 0, 0, 9, 1, 4, 0},
				{6, 0, 1, 2, 5, 0, 8, 0, 9},
				{0, 0, 0, 0, 0, 1, 0, 0, 2},
			},
			err: ErrorUnsolvableMatrix,
		},
		{
			name: "Invalid matrix",
			input: [][]int{
				{5, 3, 0, 0, 7, 0, 0, 0},
				{6, 0, 0, 1, 9, 5, 0, 0, 0},
				{0, 9, 8, 0, 0, 0, 0, 6, 0},
				{8, 0, 0, 0, 6, 0, 0, 0, 3},
				{4, 0, 0, 8, 0, 3, 0, 0, 1},
				{7, 0, 0, 0, 2, 0, 0, 0, 6},
				{0, 6, 0, 0, 0, 0, 2, 8, 0},
				{0, 0, 0, 4, 1, 9, 0, 0, 5},
				{0, 0, 0, 0, 8, 0, 0, 7, 9},
			},
			expected: [][]int{
				{5, 3, 4, 6, 7, 8, 9, 1},
				{6, 7, 2, 1, 9, 5, 3, 4, 8},
				{1, 9, 8, 3, 4, 2, 5, 6, 7},
				{8, 5, 9, 7, 6, 1, 4, 2, 3},
				{4, 2, 6, 8, 5, 3, 7, 9, 1},
				{7, 1, 3, 9, 2, 4, 8, 5, 6},
				{9, 6, 1, 5, 3, 7, 2, 8, 4},
				{2, 8, 7, 4, 1, 9, 6, 3, 5},
				{3, 4, 5, 2, 8, 6, 1, 7, 9},
			},
			err: ErrorInvalidMatrix,
		},
		{
			name: "Invalid matrix",
			input: [][]int{
				{5, 3, 0, 0, 7, 0, 0, 0, 2},
				{6, 0, 0, 1, 9, 5, 0, 0, 0},
				{0, 9, 8, 0, 0, 0, 0, 6, 0},
				{8, 0, 0, 0, 6, 0, 0, 0, 3},
				{4, 0, 0, 8, 0, 3, 0, 0, 1},
				{7, 0, 0, 0, 2, 0, 0, 0, 6},
				{0, 6, 0, 0, 0, 0, 2, 8, 0},
				{0, 0, 0, 4, 1, 9, 0, 0, 5},
			},
			expected: [][]int{
				{5, 3, 4, 6, 7, 8, 9, 1, 2},
				{6, 7, 2, 1, 9, 5, 3, 4, 8},
				{1, 9, 8, 3, 4, 2, 5, 6, 7},
				{8, 5, 9, 7, 6, 1, 4, 2, 3},
				{4, 2, 6, 8, 5, 3, 7, 9, 1},
				{7, 1, 3, 9, 2, 4, 8, 5, 6},
				{9, 6, 1, 5, 3, 7, 2, 8, 4},
				{2, 8, 7, 4, 1, 9, 6, 3, 5},
				{3, 4, 5, 2, 8, 6, 1, 7, 9},
			},
			err: ErrorInvalidMatrix,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			solved, err := SolveSudoku(tt.input)
			if err != tt.err {
				t.Errorf("Error incorrect. Expected: %v,  Got: %v\n", tt.err, err)
			}
			if tt.err == nil && !reflect.DeepEqual(solved, tt.expected) {
				t.Errorf("Sudoku puzzle was not solved correctly. Expected:\n%v\n\nGot:\n%v", tt.expected, solved)
			}
		})
	}

}
